-- Script to create business-specific waste collection agency tables for Supabase

-- 1. Create agencies_business table
CREATE TABLE agencies_business (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL,
    constituency VARCHAR NOT NULL,
    rating NUMERIC,
    reviews_count INTEGER DEFAULT 0,
    price NUMERIC NOT NULL, -- This seems to be a base price for the agency's business services
    description TEXT,
    contact_number VARCHAR,
    service_radius DOUBLE PRECISION,
    logo_url TEXT,
    county TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE agencies_business IS 'Stores information about waste collection agencies offering business services.';
COMMENT ON COLUMN agencies_business.price IS 'Base or indicative price for the agency''s business services.';

-- 2. Create agency_services_business table
CREATE TABLE agency_services_business (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    agency_id BIGINT,
    service_description TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE agency_services_business IS 'Describes specific services offered by business-focused agencies.';

-- 3. Create operational_areas_business table
CREATE TABLE operational_areas_business (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    agency_id BIGINT,
    area_name VARCHAR NOT NULL,
    area_description TEXT,
    coverage_radius DOUBLE PRECISION,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE operational_areas_business IS 'Defines operational areas for business service agencies.';

-- 4. Create collection_routes_business table
CREATE TABLE collection_routes_business (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    area_id BIGINT, -- References operational_areas_business
    route_name VARCHAR NOT NULL,
    route_description TEXT,
    collection_time_start TIME NOT NULL,
    collection_time_end TIME NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE collection_routes_business IS 'Defines collection routes within operational areas for business services.';

-- 5. Create collection_days_business table
CREATE TABLE collection_days_business (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    route_id BIGINT, -- References collection_routes_business
    day_of_week VARCHAR NOT NULL, -- e.g., 'Monday', 'Tuesday'
    created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE collection_days_business IS 'Specifies collection days for specific business service routes.';
COMMENT ON COLUMN collection_days_business.day_of_week IS 'Day of the week for collection, e.g., Monday, Tuesday.';


-- 6. Create operational_hours_business table
CREATE TABLE operational_hours_business (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    agency_id BIGINT,
    day_of_week VARCHAR NOT NULL,
    opening_time TIME NOT NULL,
    closing_time TIME NOT NULL,
    is_closed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE operational_hours_business IS 'Operational hours for business service agencies.';

-- 7. Create route_coordinates_business table
CREATE TABLE route_coordinates_business (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    route_id BIGINT, -- References collection_routes_business
    latitude NUMERIC NOT NULL,
    longitude NUMERIC NOT NULL,
    sequence_number INTEGER NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE route_coordinates_business IS 'Stores GPS coordinates for points along a business service collection route.';
COMMENT ON COLUMN route_coordinates_business.sequence_number IS 'Order of the coordinate point in the route.';

-- 8. Create subscription_plans_business table
CREATE TABLE subscription_plans_business (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    agency_id BIGINT,
    name VARCHAR NOT NULL,
    description TEXT,
    price NUMERIC NOT NULL CHECK (price >= 0),
    duration_days INTEGER NOT NULL CHECK (duration_days > 0),
    features JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    plan_type VARCHAR, -- e.g., 'tier_based', 'custom_quote'
    collection_days TEXT[], -- Array of day names, e.g., ARRAY['Monday', 'Wednesday']
    negotiable BOOLEAN DEFAULT FALSE,
    negotiated_min_price NUMERIC(10, 2) CHECK (negotiated_min_price >= 0 AND (negotiable = FALSE OR negotiated_min_price <= price)),
    allows_additional_bins BOOLEAN DEFAULT FALSE,
    additional_bin_pricing JSONB, -- e.g., {"standard_bin_monthly_fee": 50, "large_bin_monthly_fee": 80}
    waste_kg_min NUMERIC(10, 2) CHECK (waste_kg_min >= 0),
    waste_kg_max NUMERIC(10, 2) CHECK (waste_kg_max > 0 AND (waste_kg_min IS NULL OR waste_kg_max >= waste_kg_min)),
    max_collection_days BIGINT, -- Consider if this is still needed or covered by collection_days array length
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE subscription_plans_business IS 'Subscription plans offered by agencies for business waste collection.';
COMMENT ON COLUMN subscription_plans_business.plan_type IS 'Type of business plan, e.g., tier_based, custom_quote.';
COMMENT ON COLUMN subscription_plans_business.collection_days IS 'Array of scheduled collection days, e.g., {"Monday", "Thursday"}.';
COMMENT ON COLUMN subscription_plans_business.negotiable IS 'Indicates if the plan price is negotiable.';
COMMENT ON COLUMN subscription_plans_business.negotiated_min_price IS 'The minimum price the agency will accept if negotiable.';
COMMENT ON COLUMN subscription_plans_business.allows_additional_bins IS 'Indicates if additional bins can be requested for this plan.';
COMMENT ON COLUMN subscription_plans_business.additional_bin_pricing IS 'JSON object detailing pricing for different types/sizes of additional bins.';
COMMENT ON COLUMN subscription_plans_business.waste_kg_min IS 'Minimum estimated waste in kg per month for this plan/tier.';
COMMENT ON COLUMN subscription_plans_business.waste_kg_max IS 'Maximum estimated waste in kg per month for this plan/tier.';
COMMENT ON COLUMN subscription_plans_business.max_collection_days IS 'Maximum number of collection days per period under this plan (e.g., per week/month).';


-- Add Foreign Key Constraints

ALTER TABLE agency_services_business
ADD CONSTRAINT fk_agency_services_business_agency_id
FOREIGN KEY (agency_id) REFERENCES agencies_business(id) ON DELETE CASCADE;

ALTER TABLE operational_areas_business
ADD CONSTRAINT fk_operational_areas_business_agency_id
FOREIGN KEY (agency_id) REFERENCES agencies_business(id) ON DELETE CASCADE;

ALTER TABLE collection_routes_business
ADD CONSTRAINT fk_collection_routes_business_area_id
FOREIGN KEY (area_id) REFERENCES operational_areas_business(id) ON DELETE CASCADE;

ALTER TABLE collection_days_business
ADD CONSTRAINT fk_collection_days_business_route_id
FOREIGN KEY (route_id) REFERENCES collection_routes_business(id) ON DELETE CASCADE;

ALTER TABLE operational_hours_business
ADD CONSTRAINT fk_operational_hours_business_agency_id
FOREIGN KEY (agency_id) REFERENCES agencies_business(id) ON DELETE CASCADE;

ALTER TABLE route_coordinates_business
ADD CONSTRAINT fk_route_coordinates_business_route_id
FOREIGN KEY (route_id) REFERENCES collection_routes_business(id) ON DELETE CASCADE;

ALTER TABLE subscription_plans_business
ADD CONSTRAINT fk_subscription_plans_business_agency_id
FOREIGN KEY (agency_id) REFERENCES agencies_business(id) ON DELETE SET NULL; -- Or ON DELETE CASCADE if a plan must be tied to an existing agency

-- Add a check constraint for negotiated_min_price in subscription_plans_business
-- This ensures that if negotiable is true, negotiated_min_price is set and is less than or equal to the main price.
-- If negotiable is false, negotiated_min_price can be null or ignored.
ALTER TABLE subscription_plans_business
DROP CONSTRAINT IF EXISTS chk_negotiable_price_logic; -- Drop if it exists from a previous run

ALTER TABLE subscription_plans_business
ADD CONSTRAINT chk_negotiable_price_logic
CHECK (
    (negotiable = FALSE) OR
    (negotiable = TRUE AND negotiated_min_price IS NOT NULL AND negotiated_min_price <= price)
);

-- Add a check constraint for waste_kg_max in subscription_plans_business
-- Ensures waste_kg_max is greater than waste_kg_min if both are provided.
ALTER TABLE subscription_plans_business
DROP CONSTRAINT IF EXISTS chk_waste_kg_range; -- Drop if it exists

ALTER TABLE subscription_plans_business
ADD CONSTRAINT chk_waste_kg_range
CHECK (
    (waste_kg_min IS NULL OR waste_kg_max IS NULL) OR -- if one is null, check doesn't apply strictly to range
    (waste_kg_max >= waste_kg_min)
);

-- Add a check for additional_bin_pricing
ALTER TABLE subscription_plans_business
DROP CONSTRAINT IF EXISTS chk_additional_bin_pricing_logic;

ALTER TABLE subscription_plans_business
ADD CONSTRAINT chk_additional_bin_pricing_logic
CHECK (
    (allows_additional_bins = FALSE) OR
    (allows_additional_bins = TRUE AND additional_bin_pricing IS NOT NULL)
);


SELECT 'Business tables creation script executed successfully.';