-- Create constituency_change_requests table
CREATE TABLE IF NOT EXISTS public.constituency_change_requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    current_constituency TEXT NOT NULL,
    requested_constituency TEXT NOT NULL,
    reason TEXT,
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
    admin_notes TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    approved_at TIMESTAMPTZ,
    rejected_at TIMESTAMPTZ,
    admin_id UUID REFERENCES auth.users(id) ON DELETE SET NULL
);

-- Add RLS policies
ALTER TABLE public.constituency_change_requests ENABLE ROW LEVEL SECURITY;

-- Users can view their own requests
CREATE POLICY "Users can view their own requests"
ON public.constituency_change_requests
FOR SELECT
USING (auth.uid() = user_id);

-- Users can create their own requests
CREATE POLICY "Users can create their own requests"
ON public.constituency_change_requests
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Only admins can update requests (for approval/rejection)
CREATE POLICY "Only admins can update requests"
ON public.constituency_change_requests
FOR UPDATE
USING (
    EXISTS (
        SELECT 1 FROM public.users
        WHERE id = auth.uid() AND role = 'admin'
    )
);

-- Create a function to update user constituency when request is approved
CREATE OR REPLACE FUNCTION public.approve_constituency_change()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.status = 'approved' AND OLD.status = 'pending' THEN
        -- Update the user's constituency
        UPDATE public.users
        SET 
            constituency = NEW.requested_constituency,
            updated_at = now()
        WHERE id = NEW.user_id;
        
        -- Set the approval timestamp
        NEW.approved_at = now();
        NEW.admin_id = auth.uid();
    END IF;
    
    IF NEW.status = 'rejected' AND OLD.status = 'pending' THEN
        -- Set the rejection timestamp
        NEW.rejected_at = now();
        NEW.admin_id = auth.uid();
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for the function
CREATE TRIGGER on_constituency_change_approved
BEFORE UPDATE ON public.constituency_change_requests
FOR EACH ROW
EXECUTE FUNCTION public.approve_constituency_change();

-- Create a notification function for when requests are processed
CREATE OR REPLACE FUNCTION public.notify_constituency_change_status()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.status != OLD.status THEN
        INSERT INTO public.notifications (
            user_id,
            title,
            message,
            type,
            related_entity_id,
            related_entity_type
        )
        VALUES (
            NEW.user_id,
            CASE 
                WHEN NEW.status = 'approved' THEN 'Constituency Change Approved'
                WHEN NEW.status = 'rejected' THEN 'Constituency Change Rejected'
                ELSE 'Constituency Change Status Update'
            END,
            CASE 
                WHEN NEW.status = 'approved' THEN 'Your request to change constituency to ' || NEW.requested_constituency || ' has been approved.'
                WHEN NEW.status = 'rejected' THEN 'Your request to change constituency to ' || NEW.requested_constituency || ' has been rejected.'
                ELSE 'Your constituency change request status has been updated to ' || NEW.status
            END,
            'constituency_change',
            NEW.id::text,
            'constituency_change_requests'
        );
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for the notification function
CREATE TRIGGER on_constituency_change_status_updated
AFTER UPDATE ON public.constituency_change_requests
FOR EACH ROW
EXECUTE FUNCTION public.notify_constituency_change_status();
